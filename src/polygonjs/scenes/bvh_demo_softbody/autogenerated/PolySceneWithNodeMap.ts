import { ParamValueSerializedTypeMap } from "@polygonjs/polygonjs/dist/src/engine/params/types/ParamValueSerializedTypeMap";

import { PolyScene } from "@polygonjs/polygonjs/dist/src/engine/scene/PolyScene";
// obj
import { CopNetworkObjNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/obj/CopNetwork";
import { GeoObjNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/obj/Geo";
// cop
import { EnvMapCopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/cop/EnvMap";
import { ImageCopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/cop/Image";
import { ImageEXRCopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/cop/ImageEXR";
// sop
import { ActorSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Actor";
import { AreaLightSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/AreaLight";
import { BoxSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Box";
import { CameraControlsSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/CameraControls";
import { FileFBXSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/FileFBX";
import { FuseSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Fuse";
import { HemisphereLightSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/HemisphereLight";
import { HierarchySopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Hierarchy";
import { MaterialSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Material";
import { MaterialsNetworkSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/MaterialsNetwork";
import { MergeSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Merge";
import { PerspectiveCameraSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/PerspectiveCamera";
import { PolarTransformSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/PolarTransform";
import { SphereSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Sphere";
import { SpotLightSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/SpotLight";
import { TetSoftBodySolverSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/TetSoftBodySolver";
import { TetTriangulateSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/TetTriangulate";
import { TetrahedralizeSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Tetrahedralize";
import { TransformSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Transform";
// mat
import { MeshStandardBuilderMatNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/mat/MeshStandardBuilder";
import { MeshStandardMatNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/mat/MeshStandard";
import { SkyMatNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/mat/Sky";
// event
import { CameraOrbitControlsEventNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/event/CameraOrbitControls";

export class PolySceneWithNodeMap_bvh_demo_softbody extends PolyScene {
  node(path: "/COP"): CopNetworkObjNode;
  node(path: "/COP/envMap"): EnvMapCopNode;
  node(path: "/COP/imageEnv"): ImageEXRCopNode;
  node(path: "/COP/image1"): ImageCopNode;
  node(path: "/env"): GeoObjNode;
  node(path: "/env/sphere1"): SphereSopNode;
  node(path: "/env/material2"): MaterialSopNode;
  node(path: "/env/merge1"): MergeSopNode;
  node(path: "/env/transform1"): TransformSopNode;
  node(path: "/env/material1"): MaterialSopNode;
  node(path: "/env/box1"): BoxSopNode;
  node(path: "/env/MAT"): MaterialsNetworkSopNode;
  node(path: "/env/MAT/sky1"): SkyMatNode;
  node(path: "/env/MAT/meshStandardBuilder1"): MeshStandardBuilderMatNode;
  node(path: "/cameras"): GeoObjNode;
  node(path: "/cameras/perspectiveCamera1"): PerspectiveCameraSopNode;
  node(path: "/cameras/cameraControls1"): CameraControlsSopNode;
  node(
    path: "/cameras/cameraControls1/cameraOrbitControls1"
  ): CameraOrbitControlsEventNode;
  node(path: "/lights"): GeoObjNode;
  node(path: "/lights/hemisphereLight1"): HemisphereLightSopNode;
  node(path: "/lights/merge1"): MergeSopNode;
  node(path: "/lights/areaLight1"): AreaLightSopNode;
  node(path: "/lights/spotLight1"): SpotLightSopNode;
  node(path: "/lights/merge2"): MergeSopNode;
  node(path: "/lights/polarTransform1"): PolarTransformSopNode;
  node(path: "/lights/polarTransform2"): PolarTransformSopNode;
  node(path: "/geo1"): GeoObjNode;
  node(path: "/geo1/fileFBX1"): FileFBXSopNode;
  node(path: "/geo1/hierarchy1"): HierarchySopNode;
  node(path: "/geo1/transform1"): TransformSopNode;
  node(path: "/geo1/transform2"): TransformSopNode;
  node(path: "/geo1/transform4"): TransformSopNode;
  node(path: "/geo1/fuse1"): FuseSopNode;
  node(path: "/geo1/tetrahedralize1"): TetrahedralizeSopNode;
  node(path: "/geo1/tetTriangulate1"): TetTriangulateSopNode;
  node(path: "/geo1/transform3"): TransformSopNode;
  node(path: "/geo1/transform5"): TransformSopNode;
  node(path: "/geo1/material1"): MaterialSopNode;
  node(path: "/geo1/tetSoftBodySolver1"): TetSoftBodySolverSopNode;
  node(path: "/geo1/actor_softBody1"): ActorSopNode;
  node(path: "/geo1/MAT"): MaterialsNetworkSopNode;
  node(path: "/geo1/MAT/meshStandard1"): MeshStandardMatNode;
  node(
    path: string
  ): any /* we need any for now as otherwise an error occurs when adding plugins to the overloaded methods */ {
    return super.node(path);
  }
}

export interface PolySceneProps_bvh_demo_softbody {
  "COP-envMap--useCameraRenderer"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEnv--url"?: ParamValueSerializedTypeMap["string"];
  "COP-imageEnv--reload"?: ParamValueSerializedTypeMap["button"];
  "COP-imageEnv--tcolorSpace"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEnv--colorSpace"?: ParamValueSerializedTypeMap["string"];
  "COP-imageEnv--tmapping"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEnv--mapping"?: ParamValueSerializedTypeMap["integer"];
  "COP-imageEnv--twrap"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEnv--wrapS"?: ParamValueSerializedTypeMap["integer"];
  "COP-imageEnv--wrapT"?: ParamValueSerializedTypeMap["integer"];
  "COP-imageEnv--tminFilter"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEnv--minFilter"?: ParamValueSerializedTypeMap["integer"];
  "COP-imageEnv--tmagFilter"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEnv--magFilter"?: ParamValueSerializedTypeMap["integer"];
  "COP-imageEnv--tanisotropy"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEnv--useRendererMaxAnisotropy"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEnv--anisotropy"?: ParamValueSerializedTypeMap["integer"];
  "COP-imageEnv--tflipY"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEnv--flipY"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEnv--ttransform"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEnv--offset"?: ParamValueSerializedTypeMap["vector2"];
  "COP-imageEnv--offset-offsetx"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEnv--offset-offsety"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEnv--offsetx"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEnv--offsety"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEnv--repeat"?: ParamValueSerializedTypeMap["vector2"];
  "COP-imageEnv--repeat-repeatx"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEnv--repeat-repeaty"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEnv--repeatx"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEnv--repeaty"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEnv--rotation"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEnv--center"?: ParamValueSerializedTypeMap["vector2"];
  "COP-imageEnv--center-centerx"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEnv--center-centery"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEnv--centerx"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEnv--centery"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEnv--tadvanced"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEnv--tformat"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEnv--format"?: ParamValueSerializedTypeMap["integer"];
  "COP-imageEnv--ttype"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEnv--type"?: ParamValueSerializedTypeMap["integer"];
  "COP-imageEnv--checkFileType"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--url"?: ParamValueSerializedTypeMap["string"];
  "COP-image1--reload"?: ParamValueSerializedTypeMap["button"];
  "COP-image1--tcolorSpace"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--colorSpace"?: ParamValueSerializedTypeMap["string"];
  "COP-image1--tmapping"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--mapping"?: ParamValueSerializedTypeMap["integer"];
  "COP-image1--twrap"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--wrapS"?: ParamValueSerializedTypeMap["integer"];
  "COP-image1--wrapT"?: ParamValueSerializedTypeMap["integer"];
  "COP-image1--tminFilter"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--minFilter"?: ParamValueSerializedTypeMap["integer"];
  "COP-image1--tmagFilter"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--magFilter"?: ParamValueSerializedTypeMap["integer"];
  "COP-image1--tanisotropy"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--useRendererMaxAnisotropy"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--anisotropy"?: ParamValueSerializedTypeMap["integer"];
  "COP-image1--tflipY"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--flipY"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--ttransform"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--offset"?: ParamValueSerializedTypeMap["vector2"];
  "COP-image1--offset-offsetx"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--offset-offsety"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--offsetx"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--offsety"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--repeat"?: ParamValueSerializedTypeMap["vector2"];
  "COP-image1--repeat-repeatx"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--repeat-repeaty"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--repeatx"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--repeaty"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--rotation"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--center"?: ParamValueSerializedTypeMap["vector2"];
  "COP-image1--center-centerx"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--center-centery"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--centerx"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--centery"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--tadvanced"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--tformat"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--format"?: ParamValueSerializedTypeMap["integer"];
  "COP-image1--ttype"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--type"?: ParamValueSerializedTypeMap["integer"];
  "COP-image1--checkFileType"?: ParamValueSerializedTypeMap["boolean"];
  "env--transform"?: ParamValueSerializedTypeMap["folder"];
  "env--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "env--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "env--t"?: ParamValueSerializedTypeMap["vector3"];
  "env--t-tx"?: ParamValueSerializedTypeMap["float"];
  "env--t-ty"?: ParamValueSerializedTypeMap["float"];
  "env--t-tz"?: ParamValueSerializedTypeMap["float"];
  "env--tx"?: ParamValueSerializedTypeMap["float"];
  "env--ty"?: ParamValueSerializedTypeMap["float"];
  "env--tz"?: ParamValueSerializedTypeMap["float"];
  "env--r"?: ParamValueSerializedTypeMap["vector3"];
  "env--r-rx"?: ParamValueSerializedTypeMap["float"];
  "env--r-ry"?: ParamValueSerializedTypeMap["float"];
  "env--r-rz"?: ParamValueSerializedTypeMap["float"];
  "env--rx"?: ParamValueSerializedTypeMap["float"];
  "env--ry"?: ParamValueSerializedTypeMap["float"];
  "env--rz"?: ParamValueSerializedTypeMap["float"];
  "env--s"?: ParamValueSerializedTypeMap["vector3"];
  "env--s-sx"?: ParamValueSerializedTypeMap["float"];
  "env--s-sy"?: ParamValueSerializedTypeMap["float"];
  "env--s-sz"?: ParamValueSerializedTypeMap["float"];
  "env--sx"?: ParamValueSerializedTypeMap["float"];
  "env--sy"?: ParamValueSerializedTypeMap["float"];
  "env--sz"?: ParamValueSerializedTypeMap["float"];
  "env--scale"?: ParamValueSerializedTypeMap["float"];
  "env--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "env--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "env--display"?: ParamValueSerializedTypeMap["boolean"];
  "env--renderOrder"?: ParamValueSerializedTypeMap["integer"];
  "env--CAD"?: ParamValueSerializedTypeMap["folder"];
  "env--CADLinearTolerance"?: ParamValueSerializedTypeMap["float"];
  "env--CADAngularTolerance"?: ParamValueSerializedTypeMap["float"];
  "env--CADCurveAbscissa"?: ParamValueSerializedTypeMap["float"];
  "env--CADCurveTolerance"?: ParamValueSerializedTypeMap["float"];
  "env--CADDisplayEdges"?: ParamValueSerializedTypeMap["boolean"];
  "env--CADEdgesColor"?: ParamValueSerializedTypeMap["color"];
  "env--CADEdgesColor-CADEdgesColorr"?: ParamValueSerializedTypeMap["float"];
  "env--CADEdgesColor-CADEdgesColorg"?: ParamValueSerializedTypeMap["float"];
  "env--CADEdgesColor-CADEdgesColorb"?: ParamValueSerializedTypeMap["float"];
  "env--CADEdgesColorr"?: ParamValueSerializedTypeMap["float"];
  "env--CADEdgesColorg"?: ParamValueSerializedTypeMap["float"];
  "env--CADEdgesColorb"?: ParamValueSerializedTypeMap["float"];
  "env--CADDisplayMeshes"?: ParamValueSerializedTypeMap["boolean"];
  "env--CADMeshesColor"?: ParamValueSerializedTypeMap["color"];
  "env--CADMeshesColor-CADMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "env--CADMeshesColor-CADMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "env--CADMeshesColor-CADMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "env--CADMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "env--CADMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "env--CADMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "env--CADWireframe"?: ParamValueSerializedTypeMap["boolean"];
  "env--CSG"?: ParamValueSerializedTypeMap["folder"];
  "env--CSGFacetAngle"?: ParamValueSerializedTypeMap["float"];
  "env--CSGLinesColor"?: ParamValueSerializedTypeMap["color"];
  "env--CSGLinesColor-CSGLinesColorr"?: ParamValueSerializedTypeMap["float"];
  "env--CSGLinesColor-CSGLinesColorg"?: ParamValueSerializedTypeMap["float"];
  "env--CSGLinesColor-CSGLinesColorb"?: ParamValueSerializedTypeMap["float"];
  "env--CSGLinesColorr"?: ParamValueSerializedTypeMap["float"];
  "env--CSGLinesColorg"?: ParamValueSerializedTypeMap["float"];
  "env--CSGLinesColorb"?: ParamValueSerializedTypeMap["float"];
  "env--CSGMeshesColor"?: ParamValueSerializedTypeMap["color"];
  "env--CSGMeshesColor-CSGMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "env--CSGMeshesColor-CSGMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "env--CSGMeshesColor-CSGMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "env--CSGMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "env--CSGMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "env--CSGMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "env--CSGWireframe"?: ParamValueSerializedTypeMap["boolean"];
  "env--QUAD"?: ParamValueSerializedTypeMap["folder"];
  "env--QUADTriangles"?: ParamValueSerializedTypeMap["boolean"];
  "env--QUADWireframe"?: ParamValueSerializedTypeMap["boolean"];
  "env--TET"?: ParamValueSerializedTypeMap["folder"];
  "env--TetScale"?: ParamValueSerializedTypeMap["float"];
  "env--TetDisplayOuterMesh"?: ParamValueSerializedTypeMap["boolean"];
  "env--TetDisplayTetMesh"?: ParamValueSerializedTypeMap["boolean"];
  "env--TetDisplayLines"?: ParamValueSerializedTypeMap["boolean"];
  "env--TetDisplaySharedFaces"?: ParamValueSerializedTypeMap["boolean"];
  "env--TetDisplayPoints"?: ParamValueSerializedTypeMap["boolean"];
  "env--TetDisplayCenter"?: ParamValueSerializedTypeMap["boolean"];
  "env--TetDisplaySphere"?: ParamValueSerializedTypeMap["boolean"];
  "env-sphere1--type"?: ParamValueSerializedTypeMap["integer"];
  "env-sphere1--radius"?: ParamValueSerializedTypeMap["float"];
  "env-sphere1--resolution"?: ParamValueSerializedTypeMap["vector2"];
  "env-sphere1--resolution-resolutionx"?: ParamValueSerializedTypeMap["float"];
  "env-sphere1--resolution-resolutiony"?: ParamValueSerializedTypeMap["float"];
  "env-sphere1--resolutionx"?: ParamValueSerializedTypeMap["float"];
  "env-sphere1--resolutiony"?: ParamValueSerializedTypeMap["float"];
  "env-sphere1--open"?: ParamValueSerializedTypeMap["boolean"];
  "env-sphere1--phiStart"?: ParamValueSerializedTypeMap["float"];
  "env-sphere1--phiLength"?: ParamValueSerializedTypeMap["float"];
  "env-sphere1--thetaStart"?: ParamValueSerializedTypeMap["float"];
  "env-sphere1--thetaLength"?: ParamValueSerializedTypeMap["float"];
  "env-sphere1--detail"?: ParamValueSerializedTypeMap["integer"];
  "env-sphere1--center"?: ParamValueSerializedTypeMap["vector3"];
  "env-sphere1--center-centerx"?: ParamValueSerializedTypeMap["float"];
  "env-sphere1--center-centery"?: ParamValueSerializedTypeMap["float"];
  "env-sphere1--center-centerz"?: ParamValueSerializedTypeMap["float"];
  "env-sphere1--centerx"?: ParamValueSerializedTypeMap["float"];
  "env-sphere1--centery"?: ParamValueSerializedTypeMap["float"];
  "env-sphere1--centerz"?: ParamValueSerializedTypeMap["float"];
  "env-sphere1--asLines"?: ParamValueSerializedTypeMap["boolean"];
  "env-material2--group"?: ParamValueSerializedTypeMap["string"];
  "env-material2--assignMat"?: ParamValueSerializedTypeMap["boolean"];
  "env-material2--material"?: ParamValueSerializedTypeMap["node_path"];
  "env-material2--cloneMat"?: ParamValueSerializedTypeMap["boolean"];
  "env-material2--shareCustomUniforms"?: ParamValueSerializedTypeMap["boolean"];
  "env-material2--swapCurrentTex"?: ParamValueSerializedTypeMap["boolean"];
  "env-material2--texSrc0"?: ParamValueSerializedTypeMap["string"];
  "env-material2--texDest0"?: ParamValueSerializedTypeMap["string"];
  "env-merge1--compact"?: ParamValueSerializedTypeMap["boolean"];
  "env-merge1--preserveMaterials"?: ParamValueSerializedTypeMap["boolean"];
  "env-merge1--inputsCount"?: ParamValueSerializedTypeMap["integer"];
  "env-transform1--applyOn"?: ParamValueSerializedTypeMap["integer"];
  "env-transform1--group"?: ParamValueSerializedTypeMap["string"];
  "env-transform1--objectMode"?: ParamValueSerializedTypeMap["integer"];
  "env-transform1--objectTransformSpace"?: ParamValueSerializedTypeMap["integer"];
  "env-transform1--pointGroup"?: ParamValueSerializedTypeMap["string"];
  "env-transform1--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "env-transform1--t"?: ParamValueSerializedTypeMap["vector3"];
  "env-transform1--t-tx"?: ParamValueSerializedTypeMap["float"];
  "env-transform1--t-ty"?: ParamValueSerializedTypeMap["float"];
  "env-transform1--t-tz"?: ParamValueSerializedTypeMap["float"];
  "env-transform1--tx"?: ParamValueSerializedTypeMap["float"];
  "env-transform1--ty"?: ParamValueSerializedTypeMap["float"];
  "env-transform1--tz"?: ParamValueSerializedTypeMap["float"];
  "env-transform1--r"?: ParamValueSerializedTypeMap["vector3"];
  "env-transform1--r-rx"?: ParamValueSerializedTypeMap["float"];
  "env-transform1--r-ry"?: ParamValueSerializedTypeMap["float"];
  "env-transform1--r-rz"?: ParamValueSerializedTypeMap["float"];
  "env-transform1--rx"?: ParamValueSerializedTypeMap["float"];
  "env-transform1--ry"?: ParamValueSerializedTypeMap["float"];
  "env-transform1--rz"?: ParamValueSerializedTypeMap["float"];
  "env-transform1--s"?: ParamValueSerializedTypeMap["vector3"];
  "env-transform1--s-sx"?: ParamValueSerializedTypeMap["float"];
  "env-transform1--s-sy"?: ParamValueSerializedTypeMap["float"];
  "env-transform1--s-sz"?: ParamValueSerializedTypeMap["float"];
  "env-transform1--sx"?: ParamValueSerializedTypeMap["float"];
  "env-transform1--sy"?: ParamValueSerializedTypeMap["float"];
  "env-transform1--sz"?: ParamValueSerializedTypeMap["float"];
  "env-transform1--scale"?: ParamValueSerializedTypeMap["float"];
  "env-transform1--pivot"?: ParamValueSerializedTypeMap["vector3"];
  "env-transform1--pivot-pivotx"?: ParamValueSerializedTypeMap["float"];
  "env-transform1--pivot-pivoty"?: ParamValueSerializedTypeMap["float"];
  "env-transform1--pivot-pivotz"?: ParamValueSerializedTypeMap["float"];
  "env-transform1--pivotx"?: ParamValueSerializedTypeMap["float"];
  "env-transform1--pivoty"?: ParamValueSerializedTypeMap["float"];
  "env-transform1--pivotz"?: ParamValueSerializedTypeMap["float"];
  "env-material1--group"?: ParamValueSerializedTypeMap["string"];
  "env-material1--assignMat"?: ParamValueSerializedTypeMap["boolean"];
  "env-material1--material"?: ParamValueSerializedTypeMap["node_path"];
  "env-material1--cloneMat"?: ParamValueSerializedTypeMap["boolean"];
  "env-material1--shareCustomUniforms"?: ParamValueSerializedTypeMap["boolean"];
  "env-material1--swapCurrentTex"?: ParamValueSerializedTypeMap["boolean"];
  "env-material1--texSrc0"?: ParamValueSerializedTypeMap["string"];
  "env-material1--texDest0"?: ParamValueSerializedTypeMap["string"];
  "env-box1--size"?: ParamValueSerializedTypeMap["float"];
  "env-box1--sizes"?: ParamValueSerializedTypeMap["vector3"];
  "env-box1--sizes-sizesx"?: ParamValueSerializedTypeMap["float"];
  "env-box1--sizes-sizesy"?: ParamValueSerializedTypeMap["float"];
  "env-box1--sizes-sizesz"?: ParamValueSerializedTypeMap["float"];
  "env-box1--sizesx"?: ParamValueSerializedTypeMap["float"];
  "env-box1--sizesy"?: ParamValueSerializedTypeMap["float"];
  "env-box1--sizesz"?: ParamValueSerializedTypeMap["float"];
  "env-box1--divisions"?: ParamValueSerializedTypeMap["vector3"];
  "env-box1--divisions-divisionsx"?: ParamValueSerializedTypeMap["float"];
  "env-box1--divisions-divisionsy"?: ParamValueSerializedTypeMap["float"];
  "env-box1--divisions-divisionsz"?: ParamValueSerializedTypeMap["float"];
  "env-box1--divisionsx"?: ParamValueSerializedTypeMap["float"];
  "env-box1--divisionsy"?: ParamValueSerializedTypeMap["float"];
  "env-box1--divisionsz"?: ParamValueSerializedTypeMap["float"];
  "env-box1--center"?: ParamValueSerializedTypeMap["vector3"];
  "env-box1--center-centerx"?: ParamValueSerializedTypeMap["float"];
  "env-box1--center-centery"?: ParamValueSerializedTypeMap["float"];
  "env-box1--center-centerz"?: ParamValueSerializedTypeMap["float"];
  "env-box1--centerx"?: ParamValueSerializedTypeMap["float"];
  "env-box1--centery"?: ParamValueSerializedTypeMap["float"];
  "env-box1--centerz"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-sky1--turbidity"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-sky1--rayleigh"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-sky1--mieCoefficient"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-sky1--mieDirectional"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-sky1--inclination"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-sky1--azimuth"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-sky1--up"?: ParamValueSerializedTypeMap["vector3"];
  "env-MAT-sky1--up-upx"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-sky1--up-upy"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-sky1--up-upz"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-sky1--upx"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-sky1--upy"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-sky1--upz"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-meshStandardBuilder1--default"?: ParamValueSerializedTypeMap["folder"];
  "env-MAT-meshStandardBuilder1--transparent"?: ParamValueSerializedTypeMap["boolean"];
  "env-MAT-meshStandardBuilder1--opacity"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-meshStandardBuilder1--alphaTest"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-meshStandardBuilder1--textures"?: ParamValueSerializedTypeMap["folder"];
  "env-MAT-meshStandardBuilder1--useMap"?: ParamValueSerializedTypeMap["boolean"];
  "env-MAT-meshStandardBuilder1--map"?: ParamValueSerializedTypeMap["node_path"];
  "env-MAT-meshStandardBuilder1--useAlphaMap"?: ParamValueSerializedTypeMap["boolean"];
  "env-MAT-meshStandardBuilder1--alphaMap"?: ParamValueSerializedTypeMap["node_path"];
  "env-MAT-meshStandardBuilder1--useAOMap"?: ParamValueSerializedTypeMap["boolean"];
  "env-MAT-meshStandardBuilder1--aoMap"?: ParamValueSerializedTypeMap["node_path"];
  "env-MAT-meshStandardBuilder1--aoMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-meshStandardBuilder1--useBumpMap"?: ParamValueSerializedTypeMap["boolean"];
  "env-MAT-meshStandardBuilder1--bumpMap"?: ParamValueSerializedTypeMap["node_path"];
  "env-MAT-meshStandardBuilder1--bumpScale"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-meshStandardBuilder1--bumpBias"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-meshStandardBuilder1--useDisplacementMap"?: ParamValueSerializedTypeMap["boolean"];
  "env-MAT-meshStandardBuilder1--displacementMap"?: ParamValueSerializedTypeMap["node_path"];
  "env-MAT-meshStandardBuilder1--displacementScale"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-meshStandardBuilder1--displacementBias"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-meshStandardBuilder1--emissive"?: ParamValueSerializedTypeMap["color"];
  "env-MAT-meshStandardBuilder1--emissive-emissiver"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-meshStandardBuilder1--emissive-emissiveg"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-meshStandardBuilder1--emissive-emissiveb"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-meshStandardBuilder1--emissiver"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-meshStandardBuilder1--emissiveg"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-meshStandardBuilder1--emissiveb"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-meshStandardBuilder1--useEmissiveMap"?: ParamValueSerializedTypeMap["boolean"];
  "env-MAT-meshStandardBuilder1--emissiveMap"?: ParamValueSerializedTypeMap["node_path"];
  "env-MAT-meshStandardBuilder1--emissiveIntensity"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-meshStandardBuilder1--useEnvMap"?: ParamValueSerializedTypeMap["boolean"];
  "env-MAT-meshStandardBuilder1--envMap"?: ParamValueSerializedTypeMap["node_path"];
  "env-MAT-meshStandardBuilder1--envMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-meshStandardBuilder1--useLightMap"?: ParamValueSerializedTypeMap["boolean"];
  "env-MAT-meshStandardBuilder1--lightMap"?: ParamValueSerializedTypeMap["node_path"];
  "env-MAT-meshStandardBuilder1--lightMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-meshStandardBuilder1--useNormalMap"?: ParamValueSerializedTypeMap["boolean"];
  "env-MAT-meshStandardBuilder1--normalMap"?: ParamValueSerializedTypeMap["node_path"];
  "env-MAT-meshStandardBuilder1--normalMapType"?: ParamValueSerializedTypeMap["integer"];
  "env-MAT-meshStandardBuilder1--normalScale"?: ParamValueSerializedTypeMap["vector2"];
  "env-MAT-meshStandardBuilder1--normalScale-normalScalex"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-meshStandardBuilder1--normalScale-normalScaley"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-meshStandardBuilder1--normalScalex"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-meshStandardBuilder1--normalScaley"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-meshStandardBuilder1--normalScaleMult"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-meshStandardBuilder1--useMetalnessMap"?: ParamValueSerializedTypeMap["boolean"];
  "env-MAT-meshStandardBuilder1--metalnessMap"?: ParamValueSerializedTypeMap["node_path"];
  "env-MAT-meshStandardBuilder1--metalness"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-meshStandardBuilder1--useRoughnessMap"?: ParamValueSerializedTypeMap["boolean"];
  "env-MAT-meshStandardBuilder1--roughnessMap"?: ParamValueSerializedTypeMap["node_path"];
  "env-MAT-meshStandardBuilder1--roughness"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-meshStandardBuilder1--advanced"?: ParamValueSerializedTypeMap["folder"];
  "env-MAT-meshStandardBuilder1--setBuilderNode"?: ParamValueSerializedTypeMap["boolean"];
  "env-MAT-meshStandardBuilder1--builderNode"?: ParamValueSerializedTypeMap["node_path"];
  "env-MAT-meshStandardBuilder1--doubleSided"?: ParamValueSerializedTypeMap["boolean"];
  "env-MAT-meshStandardBuilder1--front"?: ParamValueSerializedTypeMap["boolean"];
  "env-MAT-meshStandardBuilder1--overrideShadowSide"?: ParamValueSerializedTypeMap["boolean"];
  "env-MAT-meshStandardBuilder1--shadowDoubleSided"?: ParamValueSerializedTypeMap["boolean"];
  "env-MAT-meshStandardBuilder1--shadowFront"?: ParamValueSerializedTypeMap["boolean"];
  "env-MAT-meshStandardBuilder1--colorWrite"?: ParamValueSerializedTypeMap["boolean"];
  "env-MAT-meshStandardBuilder1--depthWrite"?: ParamValueSerializedTypeMap["boolean"];
  "env-MAT-meshStandardBuilder1--depthTest"?: ParamValueSerializedTypeMap["boolean"];
  "env-MAT-meshStandardBuilder1--premultipliedAlpha"?: ParamValueSerializedTypeMap["boolean"];
  "env-MAT-meshStandardBuilder1--blending"?: ParamValueSerializedTypeMap["integer"];
  "env-MAT-meshStandardBuilder1--dithering"?: ParamValueSerializedTypeMap["boolean"];
  "env-MAT-meshStandardBuilder1--polygonOffset"?: ParamValueSerializedTypeMap["boolean"];
  "env-MAT-meshStandardBuilder1--polygonOffsetFactor"?: ParamValueSerializedTypeMap["integer"];
  "env-MAT-meshStandardBuilder1--polygonOffsetUnits"?: ParamValueSerializedTypeMap["integer"];
  "env-MAT-meshStandardBuilder1--wireframe"?: ParamValueSerializedTypeMap["boolean"];
  "env-MAT-meshStandardBuilder1--wireframeLinewidth"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-meshStandardBuilder1--useFog"?: ParamValueSerializedTypeMap["boolean"];
  "env-MAT-meshStandardBuilder1--shadowPCSS"?: ParamValueSerializedTypeMap["boolean"];
  "env-MAT-meshStandardBuilder1--shadowPCSSFilterSize"?: ParamValueSerializedTypeMap["float"];
  "env-MAT-meshStandardBuilder1--overrideCustomMaterials"?: ParamValueSerializedTypeMap["boolean"];
  "env-MAT-meshStandardBuilder1--createCustomMatDistance"?: ParamValueSerializedTypeMap["boolean"];
  "env-MAT-meshStandardBuilder1--createCustomMatDepth"?: ParamValueSerializedTypeMap["boolean"];
  "env-MAT-meshStandardBuilder1--createCustomMatDepthDOF"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--transform"?: ParamValueSerializedTypeMap["folder"];
  "cameras--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "cameras--t"?: ParamValueSerializedTypeMap["vector3"];
  "cameras--t-tx"?: ParamValueSerializedTypeMap["float"];
  "cameras--t-ty"?: ParamValueSerializedTypeMap["float"];
  "cameras--t-tz"?: ParamValueSerializedTypeMap["float"];
  "cameras--tx"?: ParamValueSerializedTypeMap["float"];
  "cameras--ty"?: ParamValueSerializedTypeMap["float"];
  "cameras--tz"?: ParamValueSerializedTypeMap["float"];
  "cameras--r"?: ParamValueSerializedTypeMap["vector3"];
  "cameras--r-rx"?: ParamValueSerializedTypeMap["float"];
  "cameras--r-ry"?: ParamValueSerializedTypeMap["float"];
  "cameras--r-rz"?: ParamValueSerializedTypeMap["float"];
  "cameras--rx"?: ParamValueSerializedTypeMap["float"];
  "cameras--ry"?: ParamValueSerializedTypeMap["float"];
  "cameras--rz"?: ParamValueSerializedTypeMap["float"];
  "cameras--s"?: ParamValueSerializedTypeMap["vector3"];
  "cameras--s-sx"?: ParamValueSerializedTypeMap["float"];
  "cameras--s-sy"?: ParamValueSerializedTypeMap["float"];
  "cameras--s-sz"?: ParamValueSerializedTypeMap["float"];
  "cameras--sx"?: ParamValueSerializedTypeMap["float"];
  "cameras--sy"?: ParamValueSerializedTypeMap["float"];
  "cameras--sz"?: ParamValueSerializedTypeMap["float"];
  "cameras--scale"?: ParamValueSerializedTypeMap["float"];
  "cameras--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "cameras--display"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--renderOrder"?: ParamValueSerializedTypeMap["integer"];
  "cameras--CAD"?: ParamValueSerializedTypeMap["folder"];
  "cameras--CADLinearTolerance"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADAngularTolerance"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADCurveAbscissa"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADCurveTolerance"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADDisplayEdges"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--CADEdgesColor"?: ParamValueSerializedTypeMap["color"];
  "cameras--CADEdgesColor-CADEdgesColorr"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADEdgesColor-CADEdgesColorg"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADEdgesColor-CADEdgesColorb"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADEdgesColorr"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADEdgesColorg"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADEdgesColorb"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADDisplayMeshes"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--CADMeshesColor"?: ParamValueSerializedTypeMap["color"];
  "cameras--CADMeshesColor-CADMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADMeshesColor-CADMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADMeshesColor-CADMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADWireframe"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--CSG"?: ParamValueSerializedTypeMap["folder"];
  "cameras--CSGFacetAngle"?: ParamValueSerializedTypeMap["float"];
  "cameras--CSGLinesColor"?: ParamValueSerializedTypeMap["color"];
  "cameras--CSGLinesColor-CSGLinesColorr"?: ParamValueSerializedTypeMap["float"];
  "cameras--CSGLinesColor-CSGLinesColorg"?: ParamValueSerializedTypeMap["float"];
  "cameras--CSGLinesColor-CSGLinesColorb"?: ParamValueSerializedTypeMap["float"];
  "cameras--CSGLinesColorr"?: ParamValueSerializedTypeMap["float"];
  "cameras--CSGLinesColorg"?: ParamValueSerializedTypeMap["float"];
  "cameras--CSGLinesColorb"?: ParamValueSerializedTypeMap["float"];
  "cameras--CSGMeshesColor"?: ParamValueSerializedTypeMap["color"];
  "cameras--CSGMeshesColor-CSGMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "cameras--CSGMeshesColor-CSGMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "cameras--CSGMeshesColor-CSGMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "cameras--CSGMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "cameras--CSGMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "cameras--CSGMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "cameras--CSGWireframe"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--QUAD"?: ParamValueSerializedTypeMap["folder"];
  "cameras--QUADTriangles"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--QUADWireframe"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--TET"?: ParamValueSerializedTypeMap["folder"];
  "cameras--TetScale"?: ParamValueSerializedTypeMap["float"];
  "cameras--TetDisplayOuterMesh"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--TetDisplayTetMesh"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--TetDisplayLines"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--TetDisplaySharedFaces"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--TetDisplayPoints"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--TetDisplayCenter"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--TetDisplaySphere"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-perspectiveCamera1--default"?: ParamValueSerializedTypeMap["folder"];
  "cameras-perspectiveCamera1--fov"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera1--near"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera1--far"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera1--position"?: ParamValueSerializedTypeMap["vector3"];
  "cameras-perspectiveCamera1--position-positionx"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera1--position-positiony"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera1--position-positionz"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera1--positionx"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera1--positiony"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera1--positionz"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera1--rotation"?: ParamValueSerializedTypeMap["vector3"];
  "cameras-perspectiveCamera1--rotation-rotationx"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera1--rotation-rotationy"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera1--rotation-rotationz"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera1--rotationx"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera1--rotationy"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera1--rotationz"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera1--showHelper"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-perspectiveCamera1--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-perspectiveCamera1--name"?: ParamValueSerializedTypeMap["string"];
  "cameras-perspectiveCamera1--updateTransformFromCamera"?: ParamValueSerializedTypeMap["button"];
  "cameras-perspectiveCamera1--PBR"?: ParamValueSerializedTypeMap["folder"];
  "cameras-perspectiveCamera1--apertureBlades"?: ParamValueSerializedTypeMap["integer"];
  "cameras-perspectiveCamera1--fStop"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera1--focusDistance"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera1--apertureRotation"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera1--anamorphicRatio"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1--group"?: ParamValueSerializedTypeMap["string"];
  "cameras-cameraControls1--node"?: ParamValueSerializedTypeMap["node_path"];
  "cameras-cameraControls1-cameraOrbitControls1--main"?: ParamValueSerializedTypeMap["folder"];
  "cameras-cameraControls1-cameraOrbitControls1--enabled"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--allowPan"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--allowRotate"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--allowZoom"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--tdamping"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--damping"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--screenSpacePanning"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--rotateSpeed"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--limits"?: ParamValueSerializedTypeMap["folder"];
  "cameras-cameraControls1-cameraOrbitControls1--minDistance"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--maxDistance"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--limitAzimuthAngle"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--azimuthAngleRange"?: ParamValueSerializedTypeMap["vector2"];
  "cameras-cameraControls1-cameraOrbitControls1--azimuthAngleRange-azimuthAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--azimuthAngleRange-azimuthAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--azimuthAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--azimuthAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--polarAngleRange"?: ParamValueSerializedTypeMap["vector2"];
  "cameras-cameraControls1-cameraOrbitControls1--polarAngleRange-polarAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--polarAngleRange-polarAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--polarAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--polarAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--controls"?: ParamValueSerializedTypeMap["folder"];
  "cameras-cameraControls1-cameraOrbitControls1--leftMouseButton"?: ParamValueSerializedTypeMap["integer"];
  "cameras-cameraControls1-cameraOrbitControls1--middleMouseButton"?: ParamValueSerializedTypeMap["integer"];
  "cameras-cameraControls1-cameraOrbitControls1--rightMouseButton"?: ParamValueSerializedTypeMap["integer"];
  "cameras-cameraControls1-cameraOrbitControls1--oneFingerTouch"?: ParamValueSerializedTypeMap["integer"];
  "cameras-cameraControls1-cameraOrbitControls1--twoFingersTouch"?: ParamValueSerializedTypeMap["integer"];
  "cameras-cameraControls1-cameraOrbitControls1--misc"?: ParamValueSerializedTypeMap["folder"];
  "cameras-cameraControls1-cameraOrbitControls1--target"?: ParamValueSerializedTypeMap["vector3"];
  "cameras-cameraControls1-cameraOrbitControls1--target-targetx"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--target-targety"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--target-targetz"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--targetx"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--targety"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--targetz"?: ParamValueSerializedTypeMap["float"];
  "lights--transform"?: ParamValueSerializedTypeMap["folder"];
  "lights--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "lights--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "lights--t"?: ParamValueSerializedTypeMap["vector3"];
  "lights--t-tx"?: ParamValueSerializedTypeMap["float"];
  "lights--t-ty"?: ParamValueSerializedTypeMap["float"];
  "lights--t-tz"?: ParamValueSerializedTypeMap["float"];
  "lights--tx"?: ParamValueSerializedTypeMap["float"];
  "lights--ty"?: ParamValueSerializedTypeMap["float"];
  "lights--tz"?: ParamValueSerializedTypeMap["float"];
  "lights--r"?: ParamValueSerializedTypeMap["vector3"];
  "lights--r-rx"?: ParamValueSerializedTypeMap["float"];
  "lights--r-ry"?: ParamValueSerializedTypeMap["float"];
  "lights--r-rz"?: ParamValueSerializedTypeMap["float"];
  "lights--rx"?: ParamValueSerializedTypeMap["float"];
  "lights--ry"?: ParamValueSerializedTypeMap["float"];
  "lights--rz"?: ParamValueSerializedTypeMap["float"];
  "lights--s"?: ParamValueSerializedTypeMap["vector3"];
  "lights--s-sx"?: ParamValueSerializedTypeMap["float"];
  "lights--s-sy"?: ParamValueSerializedTypeMap["float"];
  "lights--s-sz"?: ParamValueSerializedTypeMap["float"];
  "lights--sx"?: ParamValueSerializedTypeMap["float"];
  "lights--sy"?: ParamValueSerializedTypeMap["float"];
  "lights--sz"?: ParamValueSerializedTypeMap["float"];
  "lights--scale"?: ParamValueSerializedTypeMap["float"];
  "lights--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "lights--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "lights--display"?: ParamValueSerializedTypeMap["boolean"];
  "lights--renderOrder"?: ParamValueSerializedTypeMap["integer"];
  "lights--CAD"?: ParamValueSerializedTypeMap["folder"];
  "lights--CADLinearTolerance"?: ParamValueSerializedTypeMap["float"];
  "lights--CADAngularTolerance"?: ParamValueSerializedTypeMap["float"];
  "lights--CADCurveAbscissa"?: ParamValueSerializedTypeMap["float"];
  "lights--CADCurveTolerance"?: ParamValueSerializedTypeMap["float"];
  "lights--CADDisplayEdges"?: ParamValueSerializedTypeMap["boolean"];
  "lights--CADEdgesColor"?: ParamValueSerializedTypeMap["color"];
  "lights--CADEdgesColor-CADEdgesColorr"?: ParamValueSerializedTypeMap["float"];
  "lights--CADEdgesColor-CADEdgesColorg"?: ParamValueSerializedTypeMap["float"];
  "lights--CADEdgesColor-CADEdgesColorb"?: ParamValueSerializedTypeMap["float"];
  "lights--CADEdgesColorr"?: ParamValueSerializedTypeMap["float"];
  "lights--CADEdgesColorg"?: ParamValueSerializedTypeMap["float"];
  "lights--CADEdgesColorb"?: ParamValueSerializedTypeMap["float"];
  "lights--CADDisplayMeshes"?: ParamValueSerializedTypeMap["boolean"];
  "lights--CADMeshesColor"?: ParamValueSerializedTypeMap["color"];
  "lights--CADMeshesColor-CADMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "lights--CADMeshesColor-CADMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "lights--CADMeshesColor-CADMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "lights--CADMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "lights--CADMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "lights--CADMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "lights--CADWireframe"?: ParamValueSerializedTypeMap["boolean"];
  "lights--CSG"?: ParamValueSerializedTypeMap["folder"];
  "lights--CSGFacetAngle"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGLinesColor"?: ParamValueSerializedTypeMap["color"];
  "lights--CSGLinesColor-CSGLinesColorr"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGLinesColor-CSGLinesColorg"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGLinesColor-CSGLinesColorb"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGLinesColorr"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGLinesColorg"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGLinesColorb"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGMeshesColor"?: ParamValueSerializedTypeMap["color"];
  "lights--CSGMeshesColor-CSGMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGMeshesColor-CSGMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGMeshesColor-CSGMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGWireframe"?: ParamValueSerializedTypeMap["boolean"];
  "lights--QUAD"?: ParamValueSerializedTypeMap["folder"];
  "lights--QUADTriangles"?: ParamValueSerializedTypeMap["boolean"];
  "lights--QUADWireframe"?: ParamValueSerializedTypeMap["boolean"];
  "lights--TET"?: ParamValueSerializedTypeMap["folder"];
  "lights--TetScale"?: ParamValueSerializedTypeMap["float"];
  "lights--TetDisplayOuterMesh"?: ParamValueSerializedTypeMap["boolean"];
  "lights--TetDisplayTetMesh"?: ParamValueSerializedTypeMap["boolean"];
  "lights--TetDisplayLines"?: ParamValueSerializedTypeMap["boolean"];
  "lights--TetDisplaySharedFaces"?: ParamValueSerializedTypeMap["boolean"];
  "lights--TetDisplayPoints"?: ParamValueSerializedTypeMap["boolean"];
  "lights--TetDisplayCenter"?: ParamValueSerializedTypeMap["boolean"];
  "lights--TetDisplaySphere"?: ParamValueSerializedTypeMap["boolean"];
  "lights-hemisphereLight1--skyColor"?: ParamValueSerializedTypeMap["color"];
  "lights-hemisphereLight1--skyColor-skyColorr"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--skyColor-skyColorg"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--skyColor-skyColorb"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--skyColorr"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--skyColorg"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--skyColorb"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--groundColor"?: ParamValueSerializedTypeMap["color"];
  "lights-hemisphereLight1--groundColor-groundColorr"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--groundColor-groundColorg"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--groundColor-groundColorb"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--groundColorr"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--groundColorg"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--groundColorb"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--intensity"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--position"?: ParamValueSerializedTypeMap["vector3"];
  "lights-hemisphereLight1--position-positionx"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--position-positiony"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--position-positionz"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--positionx"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--positiony"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--positionz"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--name"?: ParamValueSerializedTypeMap["string"];
  "lights-merge1--compact"?: ParamValueSerializedTypeMap["boolean"];
  "lights-merge1--preserveMaterials"?: ParamValueSerializedTypeMap["boolean"];
  "lights-merge1--inputsCount"?: ParamValueSerializedTypeMap["integer"];
  "lights-areaLight1--light"?: ParamValueSerializedTypeMap["folder"];
  "lights-areaLight1--color"?: ParamValueSerializedTypeMap["color"];
  "lights-areaLight1--color-colorr"?: ParamValueSerializedTypeMap["float"];
  "lights-areaLight1--color-colorg"?: ParamValueSerializedTypeMap["float"];
  "lights-areaLight1--color-colorb"?: ParamValueSerializedTypeMap["float"];
  "lights-areaLight1--colorr"?: ParamValueSerializedTypeMap["float"];
  "lights-areaLight1--colorg"?: ParamValueSerializedTypeMap["float"];
  "lights-areaLight1--colorb"?: ParamValueSerializedTypeMap["float"];
  "lights-areaLight1--intensity"?: ParamValueSerializedTypeMap["float"];
  "lights-areaLight1--width"?: ParamValueSerializedTypeMap["float"];
  "lights-areaLight1--height"?: ParamValueSerializedTypeMap["float"];
  "lights-areaLight1--showHelper"?: ParamValueSerializedTypeMap["boolean"];
  "lights-areaLight1--name"?: ParamValueSerializedTypeMap["string"];
  "lights-spotLight1--light"?: ParamValueSerializedTypeMap["folder"];
  "lights-spotLight1--color"?: ParamValueSerializedTypeMap["color"];
  "lights-spotLight1--color-colorr"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--color-colorg"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--color-colorb"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--colorr"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--colorg"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--colorb"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--intensity"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--angle"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--penumbra"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--decay"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--distance"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--showHelper"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight1--helperSize"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--tmap"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight1--map"?: ParamValueSerializedTypeMap["node_path"];
  "lights-spotLight1--name"?: ParamValueSerializedTypeMap["string"];
  "lights-spotLight1--shadow"?: ParamValueSerializedTypeMap["folder"];
  "lights-spotLight1--castShadow"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight1--shadowAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight1--shadowUpdateOnNextRender"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight1--shadowRes"?: ParamValueSerializedTypeMap["vector2"];
  "lights-spotLight1--shadowRes-shadowResx"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowRes-shadowResy"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowResx"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowResy"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowBias"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowNear"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowFar"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowRadius"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--volumetric"?: ParamValueSerializedTypeMap["folder"];
  "lights-spotLight1--tvolumetric"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight1--volAttenuation"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--volAnglePower"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--raymarching"?: ParamValueSerializedTypeMap["folder"];
  "lights-spotLight1--raymarchingPenumbra"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--raymarchingShadowBiasAngle"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--raymarchingShadowBiasDistance"?: ParamValueSerializedTypeMap["float"];
  "lights-merge2--compact"?: ParamValueSerializedTypeMap["boolean"];
  "lights-merge2--preserveMaterials"?: ParamValueSerializedTypeMap["boolean"];
  "lights-merge2--inputsCount"?: ParamValueSerializedTypeMap["integer"];
  "lights-polarTransform1--applyOn"?: ParamValueSerializedTypeMap["integer"];
  "lights-polarTransform1--center"?: ParamValueSerializedTypeMap["vector3"];
  "lights-polarTransform1--center-centerx"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--center-centery"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--center-centerz"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--centerx"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--centery"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--centerz"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--longitude"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--latitude"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--depth"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform2--applyOn"?: ParamValueSerializedTypeMap["integer"];
  "lights-polarTransform2--center"?: ParamValueSerializedTypeMap["vector3"];
  "lights-polarTransform2--center-centerx"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform2--center-centery"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform2--center-centerz"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform2--centerx"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform2--centery"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform2--centerz"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform2--longitude"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform2--latitude"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform2--depth"?: ParamValueSerializedTypeMap["float"];
  "geo1--transform"?: ParamValueSerializedTypeMap["folder"];
  "geo1--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "geo1--t"?: ParamValueSerializedTypeMap["vector3"];
  "geo1--t-tx"?: ParamValueSerializedTypeMap["float"];
  "geo1--t-ty"?: ParamValueSerializedTypeMap["float"];
  "geo1--t-tz"?: ParamValueSerializedTypeMap["float"];
  "geo1--tx"?: ParamValueSerializedTypeMap["float"];
  "geo1--ty"?: ParamValueSerializedTypeMap["float"];
  "geo1--tz"?: ParamValueSerializedTypeMap["float"];
  "geo1--r"?: ParamValueSerializedTypeMap["vector3"];
  "geo1--r-rx"?: ParamValueSerializedTypeMap["float"];
  "geo1--r-ry"?: ParamValueSerializedTypeMap["float"];
  "geo1--r-rz"?: ParamValueSerializedTypeMap["float"];
  "geo1--rx"?: ParamValueSerializedTypeMap["float"];
  "geo1--ry"?: ParamValueSerializedTypeMap["float"];
  "geo1--rz"?: ParamValueSerializedTypeMap["float"];
  "geo1--s"?: ParamValueSerializedTypeMap["vector3"];
  "geo1--s-sx"?: ParamValueSerializedTypeMap["float"];
  "geo1--s-sy"?: ParamValueSerializedTypeMap["float"];
  "geo1--s-sz"?: ParamValueSerializedTypeMap["float"];
  "geo1--sx"?: ParamValueSerializedTypeMap["float"];
  "geo1--sy"?: ParamValueSerializedTypeMap["float"];
  "geo1--sz"?: ParamValueSerializedTypeMap["float"];
  "geo1--scale"?: ParamValueSerializedTypeMap["float"];
  "geo1--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "geo1--display"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--renderOrder"?: ParamValueSerializedTypeMap["integer"];
  "geo1--CAD"?: ParamValueSerializedTypeMap["folder"];
  "geo1--CADLinearTolerance"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADAngularTolerance"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADCurveAbscissa"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADCurveTolerance"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADDisplayEdges"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--CADEdgesColor"?: ParamValueSerializedTypeMap["color"];
  "geo1--CADEdgesColor-CADEdgesColorr"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADEdgesColor-CADEdgesColorg"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADEdgesColor-CADEdgesColorb"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADEdgesColorr"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADEdgesColorg"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADEdgesColorb"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADDisplayMeshes"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--CADMeshesColor"?: ParamValueSerializedTypeMap["color"];
  "geo1--CADMeshesColor-CADMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADMeshesColor-CADMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADMeshesColor-CADMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADWireframe"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--CSG"?: ParamValueSerializedTypeMap["folder"];
  "geo1--CSGFacetAngle"?: ParamValueSerializedTypeMap["float"];
  "geo1--CSGLinesColor"?: ParamValueSerializedTypeMap["color"];
  "geo1--CSGLinesColor-CSGLinesColorr"?: ParamValueSerializedTypeMap["float"];
  "geo1--CSGLinesColor-CSGLinesColorg"?: ParamValueSerializedTypeMap["float"];
  "geo1--CSGLinesColor-CSGLinesColorb"?: ParamValueSerializedTypeMap["float"];
  "geo1--CSGLinesColorr"?: ParamValueSerializedTypeMap["float"];
  "geo1--CSGLinesColorg"?: ParamValueSerializedTypeMap["float"];
  "geo1--CSGLinesColorb"?: ParamValueSerializedTypeMap["float"];
  "geo1--CSGMeshesColor"?: ParamValueSerializedTypeMap["color"];
  "geo1--CSGMeshesColor-CSGMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "geo1--CSGMeshesColor-CSGMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "geo1--CSGMeshesColor-CSGMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "geo1--CSGMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "geo1--CSGMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "geo1--CSGMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "geo1--CSGWireframe"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--QUAD"?: ParamValueSerializedTypeMap["folder"];
  "geo1--QUADTriangles"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--QUADWireframe"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--TET"?: ParamValueSerializedTypeMap["folder"];
  "geo1--TetScale"?: ParamValueSerializedTypeMap["float"];
  "geo1--TetDisplayOuterMesh"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--TetDisplayTetMesh"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--TetDisplayLines"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--TetDisplaySharedFaces"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--TetDisplayPoints"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--TetDisplayCenter"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--TetDisplaySphere"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-fileFBX1--url"?: ParamValueSerializedTypeMap["string"];
  "geo1-fileFBX1--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-fileFBX1--reload"?: ParamValueSerializedTypeMap["button"];
  "geo1-hierarchy1--mode"?: ParamValueSerializedTypeMap["integer"];
  "geo1-hierarchy1--levels"?: ParamValueSerializedTypeMap["integer"];
  "geo1-hierarchy1--objectMask"?: ParamValueSerializedTypeMap["string"];
  "geo1-hierarchy1--addChildMode"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform1--applyOn"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform1--group"?: ParamValueSerializedTypeMap["string"];
  "geo1-transform1--objectMode"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform1--objectTransformSpace"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform1--pointGroup"?: ParamValueSerializedTypeMap["string"];
  "geo1-transform1--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform1--t"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform1--t-tx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--t-ty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--t-tz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--tx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--ty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--tz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--r"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform1--r-rx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--r-ry"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--r-rz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--rx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--ry"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--rz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--s"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform1--s-sx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--s-sy"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--s-sz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--sx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--sy"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--sz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--scale"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--pivot"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform1--pivot-pivotx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--pivot-pivoty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--pivot-pivotz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--pivotx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--pivoty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--pivotz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--applyOn"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform2--group"?: ParamValueSerializedTypeMap["string"];
  "geo1-transform2--objectMode"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform2--objectTransformSpace"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform2--pointGroup"?: ParamValueSerializedTypeMap["string"];
  "geo1-transform2--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform2--t"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform2--t-tx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--t-ty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--t-tz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--tx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--ty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--tz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--r"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform2--r-rx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--r-ry"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--r-rz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--rx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--ry"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--rz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--s"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform2--s-sx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--s-sy"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--s-sz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--sx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--sy"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--sz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--scale"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--pivot"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform2--pivot-pivotx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--pivot-pivoty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--pivot-pivotz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--pivotx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--pivoty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--pivotz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform4--applyOn"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform4--group"?: ParamValueSerializedTypeMap["string"];
  "geo1-transform4--objectMode"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform4--objectTransformSpace"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform4--pointGroup"?: ParamValueSerializedTypeMap["string"];
  "geo1-transform4--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform4--t"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform4--t-tx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform4--t-ty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform4--t-tz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform4--tx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform4--ty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform4--tz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform4--r"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform4--r-rx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform4--r-ry"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform4--r-rz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform4--rx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform4--ry"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform4--rz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform4--s"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform4--s-sx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform4--s-sy"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform4--s-sz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform4--sx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform4--sy"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform4--sz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform4--scale"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform4--pivot"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform4--pivot-pivotx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform4--pivot-pivoty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform4--pivot-pivotz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform4--pivotx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform4--pivoty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform4--pivotz"?: ParamValueSerializedTypeMap["float"];
  "geo1-fuse1--group"?: ParamValueSerializedTypeMap["string"];
  "geo1-fuse1--dist"?: ParamValueSerializedTypeMap["float"];
  "geo1-fuse1--computeNormals"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-tetrahedralize1--fuseDist"?: ParamValueSerializedTypeMap["float"];
  "geo1-tetrahedralize1--jitter"?: ParamValueSerializedTypeMap["float"];
  "geo1-tetrahedralize1--innerPointsResolution"?: ParamValueSerializedTypeMap["integer"];
  "geo1-tetrahedralize1--minQuality"?: ParamValueSerializedTypeMap["float"];
  "geo1-tetrahedralize1--stepByStep"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-tetrahedralize1--step"?: ParamValueSerializedTypeMap["integer"];
  "geo1-tetrahedralize1--deleteOutsideTets"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-tetTriangulate1--scale"?: ParamValueSerializedTypeMap["float"];
  "geo1-tetTriangulate1--displayOuterMesh"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-tetTriangulate1--displayTetMesh"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-tetTriangulate1--displayLines"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-tetTriangulate1--displaySharedFaces"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-tetTriangulate1--displayPoints"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-tetTriangulate1--displayCenter"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-tetTriangulate1--displaySphere"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-transform3--applyOn"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform3--group"?: ParamValueSerializedTypeMap["string"];
  "geo1-transform3--objectMode"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform3--objectTransformSpace"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform3--pointGroup"?: ParamValueSerializedTypeMap["string"];
  "geo1-transform3--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform3--t"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform3--t-tx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform3--t-ty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform3--t-tz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform3--tx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform3--ty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform3--tz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform3--r"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform3--r-rx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform3--r-ry"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform3--r-rz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform3--rx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform3--ry"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform3--rz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform3--s"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform3--s-sx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform3--s-sy"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform3--s-sz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform3--sx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform3--sy"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform3--sz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform3--scale"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform3--pivot"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform3--pivot-pivotx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform3--pivot-pivoty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform3--pivot-pivotz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform3--pivotx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform3--pivoty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform3--pivotz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform5--applyOn"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform5--group"?: ParamValueSerializedTypeMap["string"];
  "geo1-transform5--objectMode"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform5--objectTransformSpace"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform5--pointGroup"?: ParamValueSerializedTypeMap["string"];
  "geo1-transform5--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform5--t"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform5--t-tx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform5--t-ty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform5--t-tz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform5--tx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform5--ty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform5--tz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform5--r"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform5--r-rx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform5--r-ry"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform5--r-rz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform5--rx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform5--ry"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform5--rz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform5--s"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform5--s-sx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform5--s-sy"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform5--s-sz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform5--sx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform5--sy"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform5--sz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform5--scale"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform5--pivot"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform5--pivot-pivotx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform5--pivot-pivoty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform5--pivot-pivotz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform5--pivotx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform5--pivoty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform5--pivotz"?: ParamValueSerializedTypeMap["float"];
  "geo1-material1--group"?: ParamValueSerializedTypeMap["string"];
  "geo1-material1--assignMat"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-material1--material"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-material1--cloneMat"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-material1--shareCustomUniforms"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-material1--swapCurrentTex"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-material1--texSrc0"?: ParamValueSerializedTypeMap["string"];
  "geo1-material1--texDest0"?: ParamValueSerializedTypeMap["string"];
  "geo1-actor_softBody1--group"?: ParamValueSerializedTypeMap["string"];
  "geo1-actor_softBody1--useThisNode"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-actor_softBody1--node"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--default"?: ParamValueSerializedTypeMap["folder"];
  "geo1-MAT-meshStandard1--color"?: ParamValueSerializedTypeMap["color"];
  "geo1-MAT-meshStandard1--color-colorr"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--color-colorg"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--color-colorb"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--colorr"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--colorg"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--colorb"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--useVertexColors"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--transparent"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--opacity"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--alphaTest"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--textures"?: ParamValueSerializedTypeMap["folder"];
  "geo1-MAT-meshStandard1--useMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--map"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--useAlphaMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--alphaMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--useAOMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--aoMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--aoMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--useBumpMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--bumpMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--bumpScale"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--bumpBias"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--useDisplacementMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--displacementMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--displacementScale"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--displacementBias"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--emissive"?: ParamValueSerializedTypeMap["color"];
  "geo1-MAT-meshStandard1--emissive-emissiver"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--emissive-emissiveg"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--emissive-emissiveb"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--emissiver"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--emissiveg"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--emissiveb"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--useEmissiveMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--emissiveMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--emissiveIntensity"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--useEnvMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--envMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--envMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--useLightMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--lightMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--lightMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--useNormalMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--normalMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--normalMapType"?: ParamValueSerializedTypeMap["integer"];
  "geo1-MAT-meshStandard1--normalScale"?: ParamValueSerializedTypeMap["vector2"];
  "geo1-MAT-meshStandard1--normalScale-normalScalex"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--normalScale-normalScaley"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--normalScalex"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--normalScaley"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--normalScaleMult"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--useMetalnessMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--metalnessMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--metalness"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--useRoughnessMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--roughnessMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--roughness"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--advanced"?: ParamValueSerializedTypeMap["folder"];
  "geo1-MAT-meshStandard1--flatShading"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--doubleSided"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--front"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--overrideShadowSide"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--shadowDoubleSided"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--shadowFront"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--colorWrite"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--depthWrite"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--depthTest"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--premultipliedAlpha"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--blending"?: ParamValueSerializedTypeMap["integer"];
  "geo1-MAT-meshStandard1--dithering"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--polygonOffset"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--polygonOffsetFactor"?: ParamValueSerializedTypeMap["integer"];
  "geo1-MAT-meshStandard1--polygonOffsetUnits"?: ParamValueSerializedTypeMap["integer"];
  "geo1-MAT-meshStandard1--wireframe"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--wireframeLinewidth"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--wireframeLinecap"?: ParamValueSerializedTypeMap["integer"];
  "geo1-MAT-meshStandard1--wireframeLinejoin"?: ParamValueSerializedTypeMap["integer"];
  "geo1-MAT-meshStandard1--useFog"?: ParamValueSerializedTypeMap["boolean"];
}
